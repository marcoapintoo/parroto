from common import XmlQuery
COMPILER Syntax
	 document = None
	 def isCommandToken(self):
			token = self.token.next
			posttoken = self.token.next.next
			return token.val=="@" and posttoken.val not in ["end", "End", "END"]
				
CHARACTERS
	letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
	digit    = "0123456789" .
	common   = "|!#$%&/=?-.,;:*[](){}\"\'".
	noquote1 = ANY - "'".
	noquote2 = ANY - '"'.
	space    = CHR(9) .. CHR(13) + " ".

TOKENS
	symbols    = common { common }.
	identifier = ( "_" | letter) { "_" | letter | digit } .
	number     = digit { digit } [ "." { digit }] .
	numunit    = digit { digit } [ "." { digit }] ( "_" | letter) { "_" | letter | digit } .
	spaces     = space {space}.
	/*
	string     =  "'" {noquote1 | "\\'" } "'" | '"' {noquote2 | '\\"' } '"' .
	quotechar  = "'" | '"'.*/

COMMENTS
	FROM "@#" TO "\n"

/*
IGNORE
	CHR(9) .. CHR(13)
*/

PRODUCTIONS
	AnyTextChar<out val>							(. val = "" .)
		=	identifier								(. val += self.token.val .)
		|	number									(. val += self.token.val .)
		|	symbols									(. val += self.token.val .)
		.
	TextString<out val>								(. val = "" .)
		=	"'"										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| "\\'"									(. val += "'" .)
			}
			"'"										(. .)
		|	'"'										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| '\\"'									(. val += '"' .)
			}
			'"'										(. .)
		|	'{'										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| '\\}'									(. val += '}' .)
			}
			'}'										(. .)
		|	AnyTextChar<out val>					(. v = "" .)
			{ AnyTextChar<out v>					(. val += v .)
			}
		.
	Syntax											(. cmd = ""; txt = ""; .)
		=	{
			Command<out cmd>						(. txt += cmd .)
			| spaces								(. txt += self.token.val; .)
			| "\\@"									(. txt += "@"; .)
			| ANY									(. txt += self.token.val; .)
		}
		EOF
				(. self.document = XmlQuery("<document-file>{0}</document-file>").format(txt); .)
		.
	Command<out cmd>								(. cmd = "" .)
		=	"@" SYNC
			[spaces]
			( SimpleCommand<out cmd>
			| ExtendedCommand<out cmd>
			)
		.
	SimpleCommand<out cmd>							(. cmd = ""; name = ""; args = ""; content = ""; temp = "" .)
		=	CommandName<out name>					(. name = name.replace("_", "").lower() .)
			[spaces									(. spaceval = self.token.val .) ]
			[
				ArgumentExpression<out args>		(. spaceval = "" .)
			]
			[spaces									(. spaceval = self.token.val .) ]
			{
				TextArguments<temp>					(. spaceval = ""; content += temp .)
			|	Command<out temp>					(. spaceval = ""; content += temp .)
			}
					(. cmd = "<{name} {args}>{content}</{name}>".format(name=name; args=args; content =content) .)
		.
	ExtendedCommand<out cmd>						(. cmd = ""; name = ""; args = ""; content = ""; .)
		=	BeginToken								(. .)
			[spaces]
			CommandName<out temp>					(. name = name.replace("_", "").lower() .)
			[spaces]
			[
				ArgumentExpression<out args>		(. .)
			]
			{										(. .)
				ANY									(. content += self.token.val; .)
				| spaces							(. content += self.token.val; .)
				| "\\@"								(. content += "@"; .)
				| 	(. if not self.isCommandToken(): break .) 
					Command<out cmd>				(. content += cmd .)
			}
					(. cmd = "<{name} {args}>{content}</{name}>".format(name=name; args=args; content=content) .)
			"@" [spaces] EndToken
		.
	BeginToken
		=	("begin" | "BEGIN" | "Begin") [spaces] "-"
		.
	EndToken
		=	("end" | "END" | "End")
		.
	CommandName<out value>							(. value = ""; id = "" .)
		=	Identifier<out id>						(. value += id .) 
		|	"{"
			Identifier<out id>						(. value += id .)
			"}" 
		.
	ArgumentExpression<out macro>					(. .)
		= '['
			[spaces]
			[
				ArgumentParameters<out macro>
			]
			[spaces]
			']'
			[spaces]
		.
	ArgumentParameter<out arg, index>				(. arg = ""; args = ""; name = "argument-{0}".format(index); .)
		=	TextString<out args>					(. if not all(o.isalnum() for o in name): raise Exception("Invalid parameter "+name) .)
			[spaces]
			[
				(':'|'=')
				[spaces]
				TextString<out args>				(. name = args; .)
			]
					(. arg = '{name} = {args}'.format(name = name, args = args) .)
		.
	ArgumentParameters<out args>					(. arg = ""; args = ""; index = 0; .)
		=	ArgumentParameter<out arg, index>		(. index += (1 if arg.startswith("argument-") else 0); args += arg; .)
			[spaces]
			{
				{','}
				[spaces]
				ArgumentParameter<out arg, index>	(. index += (1 if arg.startswith("argument-") else 0); args += arg; .)
				[spaces]
			}
			[spaces]
		.
	Identifier<out value>								(. value = "" .)
		=	identifier									(. value += self.token.val .)
			{
				(	'-'									(. value += "_" .)
				|	'.'									(. value += "." .)
				)
				identifier								(. value += self.token.val .)
			}
		.
	TextArguments<txt>									(. txt = "".)
		=	"{"
			[spaces										(. txt += self.token.val; .)]
			{
				ANY										(. txt += self.token.val; .)
				| "\\}"									(. txt += self.token.val; .)
				| "\\@"									(. txt += "@"; .)
				| spaces								(. txt += self.token.val; .)
				| Command<out cmd>						(. txt += cmd .)
			}
			"}"
	.

END Syntax.




