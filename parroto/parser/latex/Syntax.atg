COMPILER Syntax
    document = None
   def isCommandToken(self):
       token = self.token.next
       posttoken = self.token.next.next
       return token.val=="\\" and posttoken.val not in ["stop", "Stop", "STOP"]
				
CHARACTERS
	letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
	digit    = "0123456789" .
	/*common   = "|!#$%&/=?-.,;:*[](){}'"+CHR(34).*/
	/*common   = "|!#$%&/?-.,;:*[]()'"+CHR(34).*/
	common   = "|!#$%&/?-.,;:*[]()".
	noquote1 = ANY - "'".
	noquote2 = ANY - '"'.
	space    = CHR(9) .. CHR(13) + " ".

TOKENS
	symbols    = common { common }.
	identifier = ( "_" | letter) { "_" | letter | digit } .
	number     = digit { digit } [ "." { digit }] .
	numunit    = digit { digit } [ "." { digit }] ( "_" | letter) { "_" | letter | digit } .
	spaces     = space {space}.
	/*
	string     =  "'" {noquote1 | "\\'" } "'" | '"' {noquote2 | '\\"' } '"' .
	quotechar  = "'" | '"'.*/

COMMENTS
	FROM "\\#" TO "\n"
COMMENTS
	FROM "%" TO "\n"
COMMENTS
	FROM "%*" TO "*%"

/*
IGNORE
	CHR(9) .. CHR(13)
*/

PRODUCTIONS
	AnyTextChar<out val>							(. val = u"" .)
		=	identifier								(. val += self.token.val .)
		|	number									(. val += self.token.val .)
		|	symbols									(. val += self.token.val .)
		|	"-"										(. val += self.token.val .)
		.
	TextString<out val>								(. val = u"" .)
		=	"'"										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| "\\'"									(. val += u"'" .)
			}
			"'"										(. .)
		|	'"'										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| '\\"'									(. val += '"' .)
			}
			'"'										(. .)
		|	'{'										(. .)
			{ ANY									(. val += self.token.val .)
			| spaces								(. val += self.token.val .)
			| '\\}'									(. val += '}' .)
			}
			'}'										(. .)
		|	AnyTextChar<out val>					(. v = u""; .)
			{ AnyTextChar<out v>					(. val += v; .)
			}
		.
	Syntax											(. cmd = u""; txt = u""; .)
		=	{
			Command<out cmd>						(. txt += cmd .)
			| spaces								(. txt += self.token.val; .)
			| "\\\\"									(. txt += u"\\"; .)
			| ANY									(. txt += self.token.val; .)
		}
		EOF
		(. self.document = u"<document-file>{0}</document-file>".format(txt); .)
		.
	Command<out cmd>								(. cmd = u"" .)
		=	"\\" SYNC
			[spaces]
			( SimpleCommand<out cmd>
			| ExtendedCommand<out cmd>
			)
		.
	SimpleCommand<out cmd>							(. cmd = u""; name = u""; args = u""; content = u""; spaceval="";.)
		=	CommandName<out name>					(. name = name.replace("_", "").lower() .)
			[spaces									(. spaceval = self.token.val .) ]
			[
				ArgumentExpression<out args>		(. spaceval = u"" .)
			]
			[spaces									(. spaceval = self.token.val .) ]
			[
				TextArguments<out content>			(. spaceval = u""; .)
			]
			(. cmd = u"<{name} {args}>{content}</{name}>{spaceval}".format(name=name, args=args, content=content, spaceval=spaceval) .)
		.
	ExtendedCommand<out cmd>						(. cmd = u""; name = u""; args = u""; content = u""; .)
		=	BeginToken								(. .)
			[spaces]
			CommandName<out name>					(. name = name.replace("_", "").lower() .)
			[spaces									(. content = self.token.val .) ]
			[
				ArgumentExpression<out args>		(. content = u"" .)
			]
			{										(. .)
				ANY									(. content += self.token.val; .)
				| spaces							(. content += self.token.val; .)
				| "\\\\"							(. content += u"\\"; .)
				| 	(. if not self.isCommandToken(): break .) 
					Command<out cmd>				(. content += cmd .)
			}
			(. cmd = u"<{name} {args}>{content}</{name}>".format(name=name, args=args, content=content) .)
			"\\" [spaces] EndToken
		.
	BeginToken
		=	("start" | "Start" | "START") [spaces] "-"
		.
	EndToken
		=	("stop" | "Stop" | "STOP")
		.
	CommandName<out value>							(. value = u""; id = u"" .)
		=	Identifier<out id>						(. value += id .) 
		|	"{"
			Identifier<out id>						(. value += id .)
			"}" 
		.
	ArgumentExpression<out macro>					(. .)
		= '['
			[spaces]
			[
				ArgumentParameters<out macro>
			]
			[spaces]
			']'
		.
	ArgumentParameter<out arg, index>				(. arg = u""; args = u""; temp = u""; name = u"argument-{0}".format(index); .)
		=	TextString<out args>					(. .)
			[spaces]
			[
				(':'|'=')
				[spaces]
				TextString<out temp>				(. name, args = args, temp; .)
													(. if not name.replace("-","").isalnum(): raise Exception("Invalid parameter name "+name); .)
			]
			(. arg = u'{name}="{args}" '.format(name = name, args = args); .)
		.
	ArgumentParameters<out args>					(. arg = u""; args = u""; index = 0; .)
		=	ArgumentParameter<out arg, index>		(. index += (1 if arg.startswith("argument-") else 0); args += arg; .)
			[spaces]
			{
				{','}
				[spaces]
				ArgumentParameter<out arg, index>	(. index += (1 if arg.startswith("argument-") else 0); args += arg; .)
				[spaces]
			}
			[spaces]
		.
	Identifier<out value>								(. value = u"" .)
		=	identifier									(. value += self.token.val .)
			{
				(	'-'									(. value += u"-" .)
				|	'.'									(. value += u"." .)
				)
				identifier								(. value += self.token.val .)
			}
		.
	TextArguments<out txt>								(. txt = u"".)
		=	"{"
			[spaces										(. txt += self.token.val; .)]
			{
				ANY										(. txt += self.token.val; .)
				| "\\}"									(. txt += self.token.val; .)
				| "\\\\"								(. txt += u"\\"; .)
				| spaces								(. txt += self.token.val; .)
				| Command<out cmd>						(. txt += cmd .)
			}
			"}"
	.

END Syntax.




